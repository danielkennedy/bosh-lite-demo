#!/usr/bin/env bash

##
## This script boots up bosh-lite in a local Vagrant/Virtualbox VM,
## then uploads and deploys Cloud Foundry into it.
## Finally, it logs into Cloud Foundry as an admin user,
## creates an initial organization and space,
## then deploys an example application.
##

set +x

##
## Dependency locations
##
BOSH_LITE_REPO=${BOSH_LITE_REPO:-https://github.com/cloudfoundry/bosh-lite.git}
RELEASE_VERSION=${RELEASE_VERSION:-172}
RELEASE_TGZ_URL=${RELEASE_TGZ:-https://github.com/cloudfoundry/cf-release/archive/v$RELEASE_VERSION.tar.gz}
STEMCELL_NAME=${STEMCELL_NAME:-bosh-stemcell-64-warden-boshlite-ubuntu-lucid-go_agent.tgz}

APPLICATION_URL=${APPLICATION_URL:-https://github.com/cloudfoundry-community/cf-env.git}
APPLICATION_NAME=${APPLICATION_NAME:-cf-env}

WORKSPACE_DIR=${WORKSPACE_DIR:-$HOME/bosh-lite-tutorial}
PROJECT_NAME=cf-release
RELEASE_NAME=cf
RELEASE_DIR=$WORKSPACE_DIR/$PROJECT_NAME-$RELEASE_VERSION
SOURCE_RELEASE_TGZ=$WORKSPACE_DIR/$PROJECT_NAME-v$RELEASE_VERSION.tar.gz
FINAL_RELEASE_TGZ=$RELEASE_DIR/releases/$RELEASE_NAME-$RELEASE_VERSION.tgz

##
## Verify local requirements
##
if [[ "${SKIP_VERIFY}X" == "X" ]]; then
    set +e

    echo Required dependencies: ruby 1.9.3, vagrant 1.4+, git 1.7+, wget, spiff 0.3+, cf 6.0+
    echo

    ruby_installed=$(which ruby)
    ruby -v

    echo
    vagrant_installed=$(which vagrant)
    vagrant -v

    echo
    git_installed=$(which git)
    git --version

    echo
    wget_installed=$(which wget)
    wget --version | head -n1

    echo
    spiff_installed=$(which spiff)
    spiff --version

    echo
    cf_installed=$(which cf)
    cf --version

    echo
    if [[ "${ruby_installed}X" == "X" || "${vagrant_installed}X" == "X" || "${git_installed}X" == "X" || "${wget_installed}" == "X" || "${spiff_installed}X" == "X" || "${cf_installed}X" == "X" ]]; then
        echo Please install the missing dependencies above.
        echo
        if [[ "${ruby_installed}X" == "X" ]]; then
            echo ruby    - http://rvm.io
        fi
        if [[ "${vagrant_installed}X" == "X" ]]; then
            echo vagrant - http://www.vagrantup.com/downloads.html
        fi
        if [[ "${spiff_installed}X" == "X" ]]; then
            echo spiff   - https://github.com/cloudfoundry-incubator/spiff/releases
        fi
        if [[ "${cf_installed}X" == "X" ]]; then
            echo cf     - https://github.com/cloudfoundry/cli#downloading-edge
        fi
        exit 1
    fi
    echo Press [ENTER] if your versions are ok, else Ctrl-C to cancel and manually install them.
    read

    ##
    ## Workspace setup
    ##

    echo Will use $WORKSPACE_DIR for this demo. Press [ENTER] or re-run with \$WORKSPACE_DIR set.
    read
fi

set -e # exit on error
set -x # show commands being run

mkdir -p $WORKSPACE_DIR
cd $WORKSPACE_DIR

cd $WORKSPACE_DIR
if [[ ! -f Gemfile ]]; then
    echo "source 'https://rubygems.org'; gem 'bosh_cli'" > Gemfile
    bundle install
fi
if [[ ! -f $SOURCE_RELEASE_TGZ ]]; then
    wget $RELEASE_TGZ_URL -O $SOURCE_RELEASE_TGZ
fi
if [[ ! -d $RELEASE_DIR ]]; then
    tar xfz $SOURCE_RELEASE_TGZ
    cd $RELEASE_DIR
    bundle install
fi
if [[ ! -f $FINAL_RELEASE_TGZ ]]; then
    cd $RELEASE_DIR
    rm -f Gemfile*
    bundle exec bosh create release --force --with-tarball releases/cf-$RELEASE_VERSION.yml
fi
cd $WORKSPACE_DIR

if [[ ! -d bosh-lite ]]; then
    set -x
    git clone $BOSH_LITE_REPO bosh-lite
    cd bosh-lite
    rm -f Gemfile*
    set +x
fi

cd $WORKSPACE_DIR
if [[ ! -f $STEMCELL_NAME ]]; then
    bundle exec bosh download public stemcell $STEMCELL_NAME
fi

cd $WORKSPACE_DIR/bosh-lite

if [[ "${NO_REBUILD}X" == "X" ]]; then
    vagrant destroy local -f
fi
vagrant up local --provider=virtualbox


set +e # do not exit on error; allow these to fail if already performed
yes admin | bosh target https://192.168.50.4:25555
bosh upload release $FINAL_RELEASE_TGZ
bosh upload stemcell $WORKSPACE_DIR/$STEMCELL_NAME
set -e # exit on error

# Setup the CF domain:
cat << CONTENT > manifests/domain-stub.yml
---
properties:
  domain: 10.244.0.34.xip.io
CONTENT

# specifically for cf-release/bosh-lite need to setup $CF_RELEASE_DIR
export CF_RELEASE_DIR=${RELEASE_DIR}
bin/make_manifest_spiff
bin/make_manifest_spiff manifests/domain-stub.yml

# Parallelise the deployment!
#echo "  serial: false" >> manifests/cf-manifest.yml

##
## Deploy Cloud Foundry into our BOSH (bosh-lite)
## 
bosh -n deploy

bosh status
bosh vms

##
## Setup Cloud Foundry
##

cd $WORKSPACE_DIR/bosh-lite
./bin/add-route # to access 10.244.0.34 via host machine

cat << NEXTSTEPS
You're all set. To begin using Cloud Foundry, please do the following:

1. Point your 'cf' CLI tool to your CF deployment
   > cf api https://api.10.244.0.34.xip.io

2. Login to your CF deployment
   > cf auth admin admin

3. Create an organization and target it
   > cf create-org me
   > cf target -o me

4. Create a space and target it
   > cf create-space test
   > cf target -s test

That's it! Now you can deploy and scale apps in seconds!
NEXTSTEPS

